// Code generated by mockery v2.32.4. DO NOT EDIT.

package mockbind

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// DeployBackend is an autogenerated mock type for the DeployBackend type
type DeployBackend struct {
	mock.Mock
}

type DeployBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *DeployBackend) EXPECT() *DeployBackend_Expecter {
	return &DeployBackend_Expecter{mock: &_m.Mock}
}

// CodeAt provides a mock function with given fields: ctx, account, blockNumber
func (_m *DeployBackend) CodeAt(ctx context.Context, account common.Address, blockNumber *big.Int) ([]byte, error) {
	ret := _m.Called(ctx, account, blockNumber)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *big.Int) ([]byte, error)); ok {
		return rf(ctx, account, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *big.Int) []byte); ok {
		r0 = rf(ctx, account, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, *big.Int) error); ok {
		r1 = rf(ctx, account, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployBackend_CodeAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CodeAt'
type DeployBackend_CodeAt_Call struct {
	*mock.Call
}

// CodeAt is a helper method to define mock.On call
//   - ctx context.Context
//   - account common.Address
//   - blockNumber *big.Int
func (_e *DeployBackend_Expecter) CodeAt(ctx interface{}, account interface{}, blockNumber interface{}) *DeployBackend_CodeAt_Call {
	return &DeployBackend_CodeAt_Call{Call: _e.mock.On("CodeAt", ctx, account, blockNumber)}
}

func (_c *DeployBackend_CodeAt_Call) Run(run func(ctx context.Context, account common.Address, blockNumber *big.Int)) *DeployBackend_CodeAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Address), args[2].(*big.Int))
	})
	return _c
}

func (_c *DeployBackend_CodeAt_Call) Return(_a0 []byte, _a1 error) *DeployBackend_CodeAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeployBackend_CodeAt_Call) RunAndReturn(run func(context.Context, common.Address, *big.Int) ([]byte, error)) *DeployBackend_CodeAt_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionReceipt provides a mock function with given fields: ctx, txHash
func (_m *DeployBackend) TransactionReceipt(ctx context.Context, txHash common.Hash) (*types.Receipt, error) {
	ret := _m.Called(ctx, txHash)

	var r0 *types.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Receipt, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Receipt); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployBackend_TransactionReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionReceipt'
type DeployBackend_TransactionReceipt_Call struct {
	*mock.Call
}

// TransactionReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash common.Hash
func (_e *DeployBackend_Expecter) TransactionReceipt(ctx interface{}, txHash interface{}) *DeployBackend_TransactionReceipt_Call {
	return &DeployBackend_TransactionReceipt_Call{Call: _e.mock.On("TransactionReceipt", ctx, txHash)}
}

func (_c *DeployBackend_TransactionReceipt_Call) Run(run func(ctx context.Context, txHash common.Hash)) *DeployBackend_TransactionReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *DeployBackend_TransactionReceipt_Call) Return(_a0 *types.Receipt, _a1 error) *DeployBackend_TransactionReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeployBackend_TransactionReceipt_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Receipt, error)) *DeployBackend_TransactionReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeployBackend creates a new instance of DeployBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeployBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeployBackend {
	mock := &DeployBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
