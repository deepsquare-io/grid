// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	healthv1 "github.com/deepsquare-io/the-grid/supervisor/gen/go/grpc/health/v1"
	mock "github.com/stretchr/testify/mock"
)

// HealthClient is an autogenerated mock type for the HealthClient type
type HealthClient struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, in, opts
func (_m *HealthClient) Check(ctx context.Context, in *healthv1.HealthCheckRequest, opts ...grpc.CallOption) (*healthv1.HealthCheckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *healthv1.HealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthv1.HealthCheckRequest, ...grpc.CallOption) (*healthv1.HealthCheckResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthv1.HealthCheckRequest, ...grpc.CallOption) *healthv1.HealthCheckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthv1.HealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthv1.HealthCheckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx, in, opts
func (_m *HealthClient) Watch(ctx context.Context, in *healthv1.HealthCheckRequest, opts ...grpc.CallOption) (healthv1.Health_WatchClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 healthv1.Health_WatchClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthv1.HealthCheckRequest, ...grpc.CallOption) (healthv1.Health_WatchClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthv1.HealthCheckRequest, ...grpc.CallOption) healthv1.Health_WatchClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(healthv1.Health_WatchClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthv1.HealthCheckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHealthClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewHealthClient creates a new instance of HealthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHealthClient(t mockConstructorTestingTNewHealthClient) *HealthClient {
	mock := &HealthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
