// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	healthv1 "github.com/deepsquare-io/the-grid/supervisor/gen/go/grpc/health/v1"
	mock "github.com/stretchr/testify/mock"
)

// HealthServer is an autogenerated mock type for the HealthServer type
type HealthServer struct {
	mock.Mock
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *HealthServer) Check(_a0 context.Context, _a1 *healthv1.HealthCheckRequest) (*healthv1.HealthCheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *healthv1.HealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthv1.HealthCheckRequest) (*healthv1.HealthCheckResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthv1.HealthCheckRequest) *healthv1.HealthCheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthv1.HealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthv1.HealthCheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: _a0, _a1
func (_m *HealthServer) Watch(_a0 *healthv1.HealthCheckRequest, _a1 healthv1.Health_WatchServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*healthv1.HealthCheckRequest, healthv1.Health_WatchServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mustEmbedUnimplementedHealthServer provides a mock function with given fields:
func (_m *HealthServer) mustEmbedUnimplementedHealthServer() {
	_m.Called()
}

type mockConstructorTestingTNewHealthServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewHealthServer creates a new instance of HealthServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHealthServer(t mockConstructorTestingTNewHealthServer) *HealthServer {
	mock := &HealthServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
