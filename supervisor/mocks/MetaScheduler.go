// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	event "github.com/ethereum/go-ethereum/event"

	metascheduler "github.com/deepsquare-io/the-grid/supervisor/gen/go/contracts/metascheduler"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MetaScheduler is an autogenerated mock type for the MetaScheduler type
type MetaScheduler struct {
	mock.Mock
}

// ClaimNextJob provides a mock function with given fields: opts
func (_m *MetaScheduler) ClaimNextJob(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishJob provides a mock function with given fields: opts, _jobID, actualJobDurationMinute
func (_m *MetaScheduler) FinishJob(opts *bind.TransactOpts, _jobID [32]byte, actualJobDurationMinute uint64) (*types.Transaction, error) {
	ret := _m.Called(opts, _jobID, actualJobDurationMinute)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte, uint64) *types.Transaction); ok {
		r0 = rf(opts, _jobID, actualJobDurationMinute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte, uint64) error); ok {
		r1 = rf(opts, _jobID, actualJobDurationMinute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseClaimNextJobEvent provides a mock function with given fields: log
func (_m *MetaScheduler) ParseClaimNextJobEvent(log types.Log) (*metascheduler.MetaSchedulerClaimNextJobEvent, error) {
	ret := _m.Called(log)

	var r0 *metascheduler.MetaSchedulerClaimNextJobEvent
	if rf, ok := ret.Get(0).(func(types.Log) *metascheduler.MetaSchedulerClaimNextJobEvent); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metascheduler.MetaSchedulerClaimNextJobEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefuseJob provides a mock function with given fields: opts, _jobID
func (_m *MetaScheduler) RefuseJob(opts *bind.TransactOpts, _jobID [32]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, _jobID)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte) *types.Transaction); ok {
		r0 = rf(opts, _jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte) error); ok {
		r1 = rf(opts, _jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartJob provides a mock function with given fields: opts, _jobID
func (_m *MetaScheduler) StartJob(opts *bind.TransactOpts, _jobID [32]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, _jobID)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte) *types.Transaction); ok {
		r0 = rf(opts, _jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte) error); ok {
		r1 = rf(opts, _jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerFailedJob provides a mock function with given fields: opts, _jobID
func (_m *MetaScheduler) TriggerFailedJob(opts *bind.TransactOpts, _jobID [32]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, _jobID)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte) *types.Transaction); ok {
		r0 = rf(opts, _jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte) error); ok {
		r1 = rf(opts, _jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchClaimNextJobEvent provides a mock function with given fields: opts, sink
func (_m *MetaScheduler) WatchClaimNextJobEvent(opts *bind.WatchOpts, sink chan<- *metascheduler.MetaSchedulerClaimNextJobEvent) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextJobEvent) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextJobEvent) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMetaScheduler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetaScheduler creates a new instance of MetaScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetaScheduler(t mockConstructorTestingTNewMetaScheduler) *MetaScheduler {
	mock := &MetaScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
