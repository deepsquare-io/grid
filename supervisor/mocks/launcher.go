// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Launcher is an autogenerated mock type for the Launcher type
type Launcher struct {
	mock.Mock
}

type Launcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Launcher) EXPECT() *Launcher_Expecter {
	return &Launcher_Expecter{mock: &_m.Mock}
}

// RunPhase1 provides a mock function with given fields: ctx, nodes
func (_m *Launcher) RunPhase1(ctx context.Context, nodes uint64) error {
	ret := _m.Called(ctx, nodes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, nodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Launcher_RunPhase1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPhase1'
type Launcher_RunPhase1_Call struct {
	*mock.Call
}

// RunPhase1 is a helper method to define mock.On call
//   - ctx context.Context
//   - nodes uint64
func (_e *Launcher_Expecter) RunPhase1(ctx interface{}, nodes interface{}) *Launcher_RunPhase1_Call {
	return &Launcher_RunPhase1_Call{Call: _e.mock.On("RunPhase1", ctx, nodes)}
}

func (_c *Launcher_RunPhase1_Call) Run(run func(ctx context.Context, nodes uint64)) *Launcher_RunPhase1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *Launcher_RunPhase1_Call) Return(_a0 error) *Launcher_RunPhase1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Launcher_RunPhase1_Call) RunAndReturn(run func(context.Context, uint64) error) *Launcher_RunPhase1_Call {
	_c.Call.Return(run)
	return _c
}

// RunPhase2 provides a mock function with given fields: ctx, newP, newQ, newProblemSize, newBlockSize, nodes
func (_m *Launcher) RunPhase2(ctx context.Context, newP uint64, newQ uint64, newProblemSize uint64, newBlockSize uint64, nodes uint64) error {
	ret := _m.Called(ctx, newP, newQ, newProblemSize, newBlockSize, nodes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, uint64, uint64, uint64) error); ok {
		r0 = rf(ctx, newP, newQ, newProblemSize, newBlockSize, nodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Launcher_RunPhase2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPhase2'
type Launcher_RunPhase2_Call struct {
	*mock.Call
}

// RunPhase2 is a helper method to define mock.On call
//   - ctx context.Context
//   - newP uint64
//   - newQ uint64
//   - newProblemSize uint64
//   - newBlockSize uint64
//   - nodes uint64
func (_e *Launcher_Expecter) RunPhase2(ctx interface{}, newP interface{}, newQ interface{}, newProblemSize interface{}, newBlockSize interface{}, nodes interface{}) *Launcher_RunPhase2_Call {
	return &Launcher_RunPhase2_Call{Call: _e.mock.On("RunPhase2", ctx, newP, newQ, newProblemSize, newBlockSize, nodes)}
}

func (_c *Launcher_RunPhase2_Call) Run(run func(ctx context.Context, newP uint64, newQ uint64, newProblemSize uint64, newBlockSize uint64, nodes uint64)) *Launcher_RunPhase2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64), args[3].(uint64), args[4].(uint64), args[5].(uint64))
	})
	return _c
}

func (_c *Launcher_RunPhase2_Call) Return(_a0 error) *Launcher_RunPhase2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Launcher_RunPhase2_Call) RunAndReturn(run func(context.Context, uint64, uint64, uint64, uint64, uint64) error) *Launcher_RunPhase2_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: data
func (_m *Launcher) Verify(data []byte) bool {
	ret := _m.Called(data)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Launcher_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Launcher_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - data []byte
func (_e *Launcher_Expecter) Verify(data interface{}) *Launcher_Verify_Call {
	return &Launcher_Verify_Call{Call: _e.mock.On("Verify", data)}
}

func (_c *Launcher_Verify_Call) Run(run func(data []byte)) *Launcher_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Launcher_Verify_Call) Return(_a0 bool) *Launcher_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Launcher_Verify_Call) RunAndReturn(run func([]byte) bool) *Launcher_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewLauncher creates a new instance of Launcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLauncher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Launcher {
	mock := &Launcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
