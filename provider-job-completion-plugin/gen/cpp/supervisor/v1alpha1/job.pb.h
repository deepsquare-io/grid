// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supervisor/v1alpha1/job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_supervisor_2fv1alpha1_2fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_supervisor_2fv1alpha1_2fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_supervisor_2fv1alpha1_2fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_supervisor_2fv1alpha1_2fjob_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_supervisor_2fv1alpha1_2fjob_2eproto;
namespace supervisor {
namespace v1alpha1 {
class SendJobFailedRequest;
struct SendJobFailedRequestDefaultTypeInternal;
extern SendJobFailedRequestDefaultTypeInternal _SendJobFailedRequest_default_instance_;
class SendJobFailedResponse;
struct SendJobFailedResponseDefaultTypeInternal;
extern SendJobFailedResponseDefaultTypeInternal _SendJobFailedResponse_default_instance_;
class SendJobResultRequest;
struct SendJobResultRequestDefaultTypeInternal;
extern SendJobResultRequestDefaultTypeInternal _SendJobResultRequest_default_instance_;
class SendJobResultResponse;
struct SendJobResultResponseDefaultTypeInternal;
extern SendJobResultResponseDefaultTypeInternal _SendJobResultResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace supervisor
PROTOBUF_NAMESPACE_OPEN
template<> ::supervisor::v1alpha1::SendJobFailedRequest* Arena::CreateMaybeMessage<::supervisor::v1alpha1::SendJobFailedRequest>(Arena*);
template<> ::supervisor::v1alpha1::SendJobFailedResponse* Arena::CreateMaybeMessage<::supervisor::v1alpha1::SendJobFailedResponse>(Arena*);
template<> ::supervisor::v1alpha1::SendJobResultRequest* Arena::CreateMaybeMessage<::supervisor::v1alpha1::SendJobResultRequest>(Arena*);
template<> ::supervisor::v1alpha1::SendJobResultResponse* Arena::CreateMaybeMessage<::supervisor::v1alpha1::SendJobResultResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace supervisor {
namespace v1alpha1 {

// ===================================================================

class SendJobResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:supervisor.v1alpha1.SendJobResultRequest) */ {
 public:
  inline SendJobResultRequest() : SendJobResultRequest(nullptr) {}
  ~SendJobResultRequest() override;
  explicit PROTOBUF_CONSTEXPR SendJobResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendJobResultRequest(const SendJobResultRequest& from);
  SendJobResultRequest(SendJobResultRequest&& from) noexcept
    : SendJobResultRequest() {
    *this = ::std::move(from);
  }

  inline SendJobResultRequest& operator=(const SendJobResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendJobResultRequest& operator=(SendJobResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendJobResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendJobResultRequest* internal_default_instance() {
    return reinterpret_cast<const SendJobResultRequest*>(
               &_SendJobResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendJobResultRequest& a, SendJobResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendJobResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendJobResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendJobResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendJobResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendJobResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendJobResultRequest& from) {
    SendJobResultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendJobResultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "supervisor.v1alpha1.SendJobResultRequest";
  }
  protected:
  explicit SendJobResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobNameFieldNumber = 1,
    kJobIdFieldNumber = 2,
    kJobDurationFieldNumber = 3,
  };
  // string job_name = 1 [json_name = "jobName"];
  void clear_job_name();
  const std::string& job_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_job_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_job_name();
  PROTOBUF_NODISCARD std::string* release_job_name();
  void set_allocated_job_name(std::string* job_name);
  private:
  const std::string& _internal_job_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_name(const std::string& value);
  std::string* _internal_mutable_job_name();
  public:

  // uint64 job_id = 2 [json_name = "jobId"];
  void clear_job_id();
  uint64_t job_id() const;
  void set_job_id(uint64_t value);
  private:
  uint64_t _internal_job_id() const;
  void _internal_set_job_id(uint64_t value);
  public:

  // uint64 job_duration = 3 [json_name = "jobDuration"];
  void clear_job_duration();
  uint64_t job_duration() const;
  void set_job_duration(uint64_t value);
  private:
  uint64_t _internal_job_duration() const;
  void _internal_set_job_duration(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:supervisor.v1alpha1.SendJobResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_name_;
    uint64_t job_id_;
    uint64_t job_duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_supervisor_2fv1alpha1_2fjob_2eproto;
};
// -------------------------------------------------------------------

class SendJobResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:supervisor.v1alpha1.SendJobResultResponse) */ {
 public:
  inline SendJobResultResponse() : SendJobResultResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SendJobResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendJobResultResponse(const SendJobResultResponse& from);
  SendJobResultResponse(SendJobResultResponse&& from) noexcept
    : SendJobResultResponse() {
    *this = ::std::move(from);
  }

  inline SendJobResultResponse& operator=(const SendJobResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendJobResultResponse& operator=(SendJobResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendJobResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendJobResultResponse* internal_default_instance() {
    return reinterpret_cast<const SendJobResultResponse*>(
               &_SendJobResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendJobResultResponse& a, SendJobResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendJobResultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendJobResultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendJobResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendJobResultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SendJobResultResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SendJobResultResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "supervisor.v1alpha1.SendJobResultResponse";
  }
  protected:
  explicit SendJobResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:supervisor.v1alpha1.SendJobResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_supervisor_2fv1alpha1_2fjob_2eproto;
};
// -------------------------------------------------------------------

class SendJobFailedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:supervisor.v1alpha1.SendJobFailedRequest) */ {
 public:
  inline SendJobFailedRequest() : SendJobFailedRequest(nullptr) {}
  ~SendJobFailedRequest() override;
  explicit PROTOBUF_CONSTEXPR SendJobFailedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendJobFailedRequest(const SendJobFailedRequest& from);
  SendJobFailedRequest(SendJobFailedRequest&& from) noexcept
    : SendJobFailedRequest() {
    *this = ::std::move(from);
  }

  inline SendJobFailedRequest& operator=(const SendJobFailedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendJobFailedRequest& operator=(SendJobFailedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendJobFailedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendJobFailedRequest* internal_default_instance() {
    return reinterpret_cast<const SendJobFailedRequest*>(
               &_SendJobFailedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendJobFailedRequest& a, SendJobFailedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendJobFailedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendJobFailedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendJobFailedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendJobFailedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendJobFailedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendJobFailedRequest& from) {
    SendJobFailedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendJobFailedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "supervisor.v1alpha1.SendJobFailedRequest";
  }
  protected:
  explicit SendJobFailedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobNameFieldNumber = 1,
    kJobIdFieldNumber = 2,
  };
  // string job_name = 1 [json_name = "jobName"];
  void clear_job_name();
  const std::string& job_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_job_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_job_name();
  PROTOBUF_NODISCARD std::string* release_job_name();
  void set_allocated_job_name(std::string* job_name);
  private:
  const std::string& _internal_job_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_name(const std::string& value);
  std::string* _internal_mutable_job_name();
  public:

  // uint64 job_id = 2 [json_name = "jobId"];
  void clear_job_id();
  uint64_t job_id() const;
  void set_job_id(uint64_t value);
  private:
  uint64_t _internal_job_id() const;
  void _internal_set_job_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:supervisor.v1alpha1.SendJobFailedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_name_;
    uint64_t job_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_supervisor_2fv1alpha1_2fjob_2eproto;
};
// -------------------------------------------------------------------

class SendJobFailedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:supervisor.v1alpha1.SendJobFailedResponse) */ {
 public:
  inline SendJobFailedResponse() : SendJobFailedResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SendJobFailedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendJobFailedResponse(const SendJobFailedResponse& from);
  SendJobFailedResponse(SendJobFailedResponse&& from) noexcept
    : SendJobFailedResponse() {
    *this = ::std::move(from);
  }

  inline SendJobFailedResponse& operator=(const SendJobFailedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendJobFailedResponse& operator=(SendJobFailedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendJobFailedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendJobFailedResponse* internal_default_instance() {
    return reinterpret_cast<const SendJobFailedResponse*>(
               &_SendJobFailedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendJobFailedResponse& a, SendJobFailedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendJobFailedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendJobFailedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendJobFailedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendJobFailedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SendJobFailedResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SendJobFailedResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "supervisor.v1alpha1.SendJobFailedResponse";
  }
  protected:
  explicit SendJobFailedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:supervisor.v1alpha1.SendJobFailedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_supervisor_2fv1alpha1_2fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendJobResultRequest

// string job_name = 1 [json_name = "jobName"];
inline void SendJobResultRequest::clear_job_name() {
  _impl_.job_name_.ClearToEmpty();
}
inline const std::string& SendJobResultRequest::job_name() const {
  // @@protoc_insertion_point(field_get:supervisor.v1alpha1.SendJobResultRequest.job_name)
  return _internal_job_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendJobResultRequest::set_job_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.job_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:supervisor.v1alpha1.SendJobResultRequest.job_name)
}
inline std::string* SendJobResultRequest::mutable_job_name() {
  std::string* _s = _internal_mutable_job_name();
  // @@protoc_insertion_point(field_mutable:supervisor.v1alpha1.SendJobResultRequest.job_name)
  return _s;
}
inline const std::string& SendJobResultRequest::_internal_job_name() const {
  return _impl_.job_name_.Get();
}
inline void SendJobResultRequest::_internal_set_job_name(const std::string& value) {
  
  _impl_.job_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SendJobResultRequest::_internal_mutable_job_name() {
  
  return _impl_.job_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SendJobResultRequest::release_job_name() {
  // @@protoc_insertion_point(field_release:supervisor.v1alpha1.SendJobResultRequest.job_name)
  return _impl_.job_name_.Release();
}
inline void SendJobResultRequest::set_allocated_job_name(std::string* job_name) {
  if (job_name != nullptr) {
    
  } else {
    
  }
  _impl_.job_name_.SetAllocated(job_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.job_name_.IsDefault()) {
    _impl_.job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:supervisor.v1alpha1.SendJobResultRequest.job_name)
}

// uint64 job_id = 2 [json_name = "jobId"];
inline void SendJobResultRequest::clear_job_id() {
  _impl_.job_id_ = uint64_t{0u};
}
inline uint64_t SendJobResultRequest::_internal_job_id() const {
  return _impl_.job_id_;
}
inline uint64_t SendJobResultRequest::job_id() const {
  // @@protoc_insertion_point(field_get:supervisor.v1alpha1.SendJobResultRequest.job_id)
  return _internal_job_id();
}
inline void SendJobResultRequest::_internal_set_job_id(uint64_t value) {
  
  _impl_.job_id_ = value;
}
inline void SendJobResultRequest::set_job_id(uint64_t value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:supervisor.v1alpha1.SendJobResultRequest.job_id)
}

// uint64 job_duration = 3 [json_name = "jobDuration"];
inline void SendJobResultRequest::clear_job_duration() {
  _impl_.job_duration_ = uint64_t{0u};
}
inline uint64_t SendJobResultRequest::_internal_job_duration() const {
  return _impl_.job_duration_;
}
inline uint64_t SendJobResultRequest::job_duration() const {
  // @@protoc_insertion_point(field_get:supervisor.v1alpha1.SendJobResultRequest.job_duration)
  return _internal_job_duration();
}
inline void SendJobResultRequest::_internal_set_job_duration(uint64_t value) {
  
  _impl_.job_duration_ = value;
}
inline void SendJobResultRequest::set_job_duration(uint64_t value) {
  _internal_set_job_duration(value);
  // @@protoc_insertion_point(field_set:supervisor.v1alpha1.SendJobResultRequest.job_duration)
}

// -------------------------------------------------------------------

// SendJobResultResponse

// -------------------------------------------------------------------

// SendJobFailedRequest

// string job_name = 1 [json_name = "jobName"];
inline void SendJobFailedRequest::clear_job_name() {
  _impl_.job_name_.ClearToEmpty();
}
inline const std::string& SendJobFailedRequest::job_name() const {
  // @@protoc_insertion_point(field_get:supervisor.v1alpha1.SendJobFailedRequest.job_name)
  return _internal_job_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendJobFailedRequest::set_job_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.job_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:supervisor.v1alpha1.SendJobFailedRequest.job_name)
}
inline std::string* SendJobFailedRequest::mutable_job_name() {
  std::string* _s = _internal_mutable_job_name();
  // @@protoc_insertion_point(field_mutable:supervisor.v1alpha1.SendJobFailedRequest.job_name)
  return _s;
}
inline const std::string& SendJobFailedRequest::_internal_job_name() const {
  return _impl_.job_name_.Get();
}
inline void SendJobFailedRequest::_internal_set_job_name(const std::string& value) {
  
  _impl_.job_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SendJobFailedRequest::_internal_mutable_job_name() {
  
  return _impl_.job_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SendJobFailedRequest::release_job_name() {
  // @@protoc_insertion_point(field_release:supervisor.v1alpha1.SendJobFailedRequest.job_name)
  return _impl_.job_name_.Release();
}
inline void SendJobFailedRequest::set_allocated_job_name(std::string* job_name) {
  if (job_name != nullptr) {
    
  } else {
    
  }
  _impl_.job_name_.SetAllocated(job_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.job_name_.IsDefault()) {
    _impl_.job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:supervisor.v1alpha1.SendJobFailedRequest.job_name)
}

// uint64 job_id = 2 [json_name = "jobId"];
inline void SendJobFailedRequest::clear_job_id() {
  _impl_.job_id_ = uint64_t{0u};
}
inline uint64_t SendJobFailedRequest::_internal_job_id() const {
  return _impl_.job_id_;
}
inline uint64_t SendJobFailedRequest::job_id() const {
  // @@protoc_insertion_point(field_get:supervisor.v1alpha1.SendJobFailedRequest.job_id)
  return _internal_job_id();
}
inline void SendJobFailedRequest::_internal_set_job_id(uint64_t value) {
  
  _impl_.job_id_ = value;
}
inline void SendJobFailedRequest::set_job_id(uint64_t value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:supervisor.v1alpha1.SendJobFailedRequest.job_id)
}

// -------------------------------------------------------------------

// SendJobFailedResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace supervisor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_supervisor_2fv1alpha1_2fjob_2eproto
