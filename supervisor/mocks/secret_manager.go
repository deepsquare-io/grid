// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SecretManager is an autogenerated mock type for the Manager type
type SecretManager struct {
	mock.Mock
}

type SecretManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretManager) EXPECT() *SecretManager_Expecter {
	return &SecretManager_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *SecretManager) Get() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// SecretManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SecretManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *SecretManager_Expecter) Get() *SecretManager_Get_Call {
	return &SecretManager_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *SecretManager_Get_Call) Run(run func()) *SecretManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretManager_Get_Call) Return(_a0 []byte) *SecretManager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecretManager_Get_Call) RunAndReturn(run func() []byte) *SecretManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: _a0
func (_m *SecretManager) Validate(_a0 []byte) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SecretManager_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type SecretManager_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - _a0 []byte
func (_e *SecretManager_Expecter) Validate(_a0 interface{}) *SecretManager_Validate_Call {
	return &SecretManager_Validate_Call{Call: _e.mock.On("Validate", _a0)}
}

func (_c *SecretManager_Validate_Call) Run(run func(_a0 []byte)) *SecretManager_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *SecretManager_Validate_Call) Return(_a0 bool) *SecretManager_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecretManager_Validate_Call) RunAndReturn(run func([]byte) bool) *SecretManager_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecretManager creates a new instance of SecretManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretManager {
	mock := &SecretManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
