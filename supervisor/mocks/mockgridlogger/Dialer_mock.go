// Code generated by mockery v2.32.4. DO NOT EDIT.

package mockgridlogger

import (
	context "context"

	loggerv1alpha1 "github.com/deepsquare-io/grid/supervisor/generated/logger/v1alpha1"

	mock "github.com/stretchr/testify/mock"
)

// Dialer is an autogenerated mock type for the Dialer type
type Dialer struct {
	mock.Mock
}

type Dialer_Expecter struct {
	mock *mock.Mock
}

func (_m *Dialer) EXPECT() *Dialer_Expecter {
	return &Dialer_Expecter{mock: &_m.Mock}
}

// DialContext provides a mock function with given fields: ctx, endpoint
func (_m *Dialer) DialContext(ctx context.Context, endpoint string) (loggerv1alpha1.LoggerAPI_WriteClient, func() error, error) {
	ret := _m.Called(ctx, endpoint)

	var r0 loggerv1alpha1.LoggerAPI_WriteClient
	var r1 func() error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (loggerv1alpha1.LoggerAPI_WriteClient, func() error, error)); ok {
		return rf(ctx, endpoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) loggerv1alpha1.LoggerAPI_WriteClient); ok {
		r0 = rf(ctx, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(loggerv1alpha1.LoggerAPI_WriteClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) func() error); ok {
		r1 = rf(ctx, endpoint)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, endpoint)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Dialer_DialContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DialContext'
type Dialer_DialContext_Call struct {
	*mock.Call
}

// DialContext is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
func (_e *Dialer_Expecter) DialContext(ctx interface{}, endpoint interface{}) *Dialer_DialContext_Call {
	return &Dialer_DialContext_Call{Call: _e.mock.On("DialContext", ctx, endpoint)}
}

func (_c *Dialer_DialContext_Call) Run(run func(ctx context.Context, endpoint string)) *Dialer_DialContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Dialer_DialContext_Call) Return(c loggerv1alpha1.LoggerAPI_WriteClient, close func() error, err error) *Dialer_DialContext_Call {
	_c.Call.Return(c, close, err)
	return _c
}

func (_c *Dialer_DialContext_Call) RunAndReturn(run func(context.Context, string) (loggerv1alpha1.LoggerAPI_WriteClient, func() error, error)) *Dialer_DialContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewDialer creates a new instance of Dialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dialer {
	mock := &Dialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
