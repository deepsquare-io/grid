// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/deepsquare-io/grid/smart-contracts-exporter/graph/scalar"
)

type CPUTimeMetrics struct {
	// Total CPU*time used in jobs. (CPU.minutes)
	Total float64 `json:"total"`
}

type CreditsMetrics struct {
	// Total credits used in jobs.
	SpentTotal float64 `json:"spentTotal"`
}

type GpuTimeMetrics struct {
	// Total GPU*time used in jobs. (GPU.minutes)
	Total float64 `json:"total"`
}

type Job struct {
	JobID            string         `json:"jobId"`
	Status           int            `json:"status"`
	CustomerAddr     string         `json:"customerAddr"`
	ProviderAddr     string         `json:"providerAddr"`
	Definition       *JobDefinition `json:"definition"`
	Valid            bool           `json:"valid"`
	Cost             *JobCost       `json:"cost"`
	Time             *JobTime       `json:"time"`
	JobName          string         `json:"jobName"`
	HasCancelRequest bool           `json:"hasCancelRequest"`
}

type JobCost struct {
	MaxCost                   scalar.BigInt `json:"maxCost"`
	FinalCost                 scalar.BigInt `json:"finalCost"`
	PendingTopUp              scalar.BigInt `json:"pendingTopUp"`
	DelegateSpendingAuthority bool          `json:"delegateSpendingAuthority"`
}

type JobDefinition struct {
	GpuPerTask int `json:"gpuPerTask"`
	MemPerCPU  int `json:"memPerCpu"`
	CPUPerTask int `json:"cpuPerTask"`
	Ntasks     int `json:"ntasks"`
}

type JobDurationMetrics struct {
	// Max duration over a period of time.
	Max float64 `json:"max"`
	// Average of non-zero values duration over a period of time.
	Average float64 `json:"average"`
}

type JobMetrics struct {
	Duration *JobDurationMetrics `json:"duration,omitempty"`
	// Total jobs submitted.
	Total float64 `json:"total"`
	// Moving rate between two time.
	//
	// Take the latest point of [endTime] to get the rate of jobs of the last [days].
	//
	// [days] also determine the resolution.
	//
	// The time parameters take a UNIX timestamp in seconds.
	//
	// Example: If endTime = now, startTime = now, days = 30d, you get the number of jobs that was submitted the last 30d.
	//
	// Example 2: If endTime = 01-01-2022, startTime = 01-01-2021, days = 30d, you get 12 points which indicates the number of jobs that was submitted each month of 2022.
	RateRange []*TimestampValue `json:"rateRange"`
}

type JobTime struct {
	Start                  scalar.BigInt `json:"start"`
	End                    scalar.BigInt `json:"end"`
	CancelRequestTimestamp scalar.BigInt `json:"cancelRequestTimestamp"`
	BlockNumberStateChange scalar.BigInt `json:"blockNumberStateChange"`
}

type Metric struct {
	Key   string  `json:"key"`
	Value float64 `json:"value"`
}

type TimestampValue struct {
	// Unix timestamp in seconds.
	Timestamp int     `json:"timestamp"`
	Value     float64 `json:"value"`
}

type WalletMetrics struct {
	// Best wallets that submitted jobs.
	Top10 []*Metric `json:"top10"`
	// Number of unique wallets that submitted jobs.
	Count int `json:"count"`
}

type WalletOrderBy string

const (
	WalletOrderByJobsSubmitted WalletOrderBy = "JOBS_SUBMITTED"
	WalletOrderByCreditSpent   WalletOrderBy = "CREDIT_SPENT"
)

var AllWalletOrderBy = []WalletOrderBy{
	WalletOrderByJobsSubmitted,
	WalletOrderByCreditSpent,
}

func (e WalletOrderBy) IsValid() bool {
	switch e {
	case WalletOrderByJobsSubmitted, WalletOrderByCreditSpent:
		return true
	}
	return false
}

func (e WalletOrderBy) String() string {
	return string(e)
}

func (e *WalletOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WalletOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WalletOrderBy", str)
	}
	return nil
}

func (e WalletOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
