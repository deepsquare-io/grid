// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/ethereum/go-ethereum/event"
	mock "github.com/stretchr/testify/mock"
)

// ResubscribeFunc is an autogenerated mock type for the ResubscribeFunc type
type ResubscribeFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *ResubscribeFunc) Execute(_a0 context.Context) (event.Subscription, error) {
	ret := _m.Called(_a0)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(context.Context) event.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewResubscribeFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewResubscribeFunc creates a new instance of ResubscribeFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResubscribeFunc(t mockConstructorTestingTNewResubscribeFunc) *ResubscribeFunc {
	mock := &ResubscribeFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
