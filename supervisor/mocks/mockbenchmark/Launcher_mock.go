// Code generated by mockery v2.32.4. DO NOT EDIT.

package mockbenchmark

import (
	context "context"

	benchmark "github.com/deepsquare-io/the-grid/supervisor/pkg/benchmark"

	mock "github.com/stretchr/testify/mock"
)

// Launcher is an autogenerated mock type for the Launcher type
type Launcher struct {
	mock.Mock
}

type Launcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Launcher) EXPECT() *Launcher_Expecter {
	return &Launcher_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: ctx, name
func (_m *Launcher) Cancel(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Launcher_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type Launcher_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Launcher_Expecter) Cancel(ctx interface{}, name interface{}) *Launcher_Cancel_Call {
	return &Launcher_Cancel_Call{Call: _e.mock.On("Cancel", ctx, name)}
}

func (_c *Launcher_Cancel_Call) Run(run func(ctx context.Context, name string)) *Launcher_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Launcher_Cancel_Call) Return(_a0 error) *Launcher_Cancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Launcher_Cancel_Call) RunAndReturn(run func(context.Context, string) error) *Launcher_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobName provides a mock function with given fields: name
func (_m *Launcher) GetJobName(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Launcher_GetJobName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobName'
type Launcher_GetJobName_Call struct {
	*mock.Call
}

// GetJobName is a helper method to define mock.On call
//   - name string
func (_e *Launcher_Expecter) GetJobName(name interface{}) *Launcher_GetJobName_Call {
	return &Launcher_GetJobName_Call{Call: _e.mock.On("GetJobName", name)}
}

func (_c *Launcher_GetJobName_Call) Run(run func(name string)) *Launcher_GetJobName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Launcher_GetJobName_Call) Return(_a0 string) *Launcher_GetJobName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Launcher_GetJobName_Call) RunAndReturn(run func(string) string) *Launcher_GetJobName_Call {
	_c.Call.Return(run)
	return _c
}

// Launch provides a mock function with given fields: ctx, name, _a2
func (_m *Launcher) Launch(ctx context.Context, name string, _a2 *benchmark.Benchmark) error {
	ret := _m.Called(ctx, name, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *benchmark.Benchmark) error); ok {
		r0 = rf(ctx, name, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Launcher_Launch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Launch'
type Launcher_Launch_Call struct {
	*mock.Call
}

// Launch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - _a2 *benchmark.Benchmark
func (_e *Launcher_Expecter) Launch(ctx interface{}, name interface{}, _a2 interface{}) *Launcher_Launch_Call {
	return &Launcher_Launch_Call{Call: _e.mock.On("Launch", ctx, name, _a2)}
}

func (_c *Launcher_Launch_Call) Run(run func(ctx context.Context, name string, _a2 *benchmark.Benchmark)) *Launcher_Launch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*benchmark.Benchmark))
	})
	return _c
}

func (_c *Launcher_Launch_Call) Return(_a0 error) *Launcher_Launch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Launcher_Launch_Call) RunAndReturn(run func(context.Context, string, *benchmark.Benchmark) error) *Launcher_Launch_Call {
	_c.Call.Return(run)
	return _c
}

// NewLauncher creates a new instance of Launcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLauncher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Launcher {
	mock := &Launcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
