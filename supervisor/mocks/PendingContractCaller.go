// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"
)

// PendingContractCaller is an autogenerated mock type for the PendingContractCaller type
type PendingContractCaller struct {
	mock.Mock
}

// PendingCallContract provides a mock function with given fields: ctx, call
func (_m *PendingContractCaller) PendingCallContract(ctx context.Context, call ethereum.CallMsg) ([]byte, error) {
	ret := _m.Called(ctx, call)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg) []byte); ok {
		r0 = rf(ctx, call)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ethereum.CallMsg) error); ok {
		r1 = rf(ctx, call)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PendingCodeAt provides a mock function with given fields: ctx, contract
func (_m *PendingContractCaller) PendingCodeAt(ctx context.Context, contract common.Address) ([]byte, error) {
	ret := _m.Called(ctx, contract)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) []byte); ok {
		r0 = rf(ctx, contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Address) error); ok {
		r1 = rf(ctx, contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPendingContractCaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewPendingContractCaller creates a new instance of PendingContractCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPendingContractCaller(t mockConstructorTestingTNewPendingContractCaller) *PendingContractCaller {
	mock := &PendingContractCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
