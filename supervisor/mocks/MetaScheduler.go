// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	metascheduler "github.com/deepsquare-io/the-grid/supervisor/pkg/metascheduler"

	metaschedulerabi "github.com/deepsquare-io/the-grid/supervisor/generated/abi/metascheduler"

	mock "github.com/stretchr/testify/mock"
)

// MetaScheduler is an autogenerated mock type for the MetaScheduler type
type MetaScheduler struct {
	mock.Mock
}

// Claim provides a mock function with given fields: ctx
func (_m *MetaScheduler) Claim(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimCancelling provides a mock function with given fields: ctx
func (_m *MetaScheduler) ClaimCancelling(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimTopUp provides a mock function with given fields: ctx
func (_m *MetaScheduler) ClaimTopUp(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJobStatus provides a mock function with given fields: ctx, jobID
func (_m *MetaScheduler) GetJobStatus(ctx context.Context, jobID [32]byte) (metascheduler.JobStatus, error) {
	ret := _m.Called(ctx, jobID)

	var r0 metascheduler.JobStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) (metascheduler.JobStatus, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) metascheduler.JobStatus); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Get(0).(metascheduler.JobStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, [32]byte) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderAddress provides a mock function with given fields:
func (_m *MetaScheduler) GetProviderAddress() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// RefuseJob provides a mock function with given fields: ctx, jobID
func (_m *MetaScheduler) RefuseJob(ctx context.Context, jobID [32]byte) error {
	ret := _m.Called(ctx, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetJobStatus provides a mock function with given fields: ctx, jobID, status, jobDurationMinute
func (_m *MetaScheduler) SetJobStatus(ctx context.Context, jobID [32]byte, status metascheduler.JobStatus, jobDurationMinute uint64) error {
	ret := _m.Called(ctx, jobID, status, jobDurationMinute)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte, metascheduler.JobStatus, uint64) error); ok {
		r0 = rf(ctx, jobID, status, jobDurationMinute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchEvents provides a mock function with given fields: ctx, claimNextTopUpJobEvents, claimNextCancellingJobEvents, claimJobEvents
func (_m *MetaScheduler) WatchEvents(ctx context.Context, claimNextTopUpJobEvents chan<- *metaschedulerabi.MetaSchedulerClaimNextTopUpJobEvent, claimNextCancellingJobEvents chan<- *metaschedulerabi.MetaSchedulerClaimNextCancellingJobEvent, claimJobEvents chan<- *metaschedulerabi.MetaSchedulerClaimJobEvent) (event.Subscription, error) {
	ret := _m.Called(ctx, claimNextTopUpJobEvents, claimNextCancellingJobEvents, claimJobEvents)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *metaschedulerabi.MetaSchedulerClaimNextTopUpJobEvent, chan<- *metaschedulerabi.MetaSchedulerClaimNextCancellingJobEvent, chan<- *metaschedulerabi.MetaSchedulerClaimJobEvent) (event.Subscription, error)); ok {
		return rf(ctx, claimNextTopUpJobEvents, claimNextCancellingJobEvents, claimJobEvents)
	}
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *metaschedulerabi.MetaSchedulerClaimNextTopUpJobEvent, chan<- *metaschedulerabi.MetaSchedulerClaimNextCancellingJobEvent, chan<- *metaschedulerabi.MetaSchedulerClaimJobEvent) event.Subscription); ok {
		r0 = rf(ctx, claimNextTopUpJobEvents, claimNextCancellingJobEvents, claimJobEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, chan<- *metaschedulerabi.MetaSchedulerClaimNextTopUpJobEvent, chan<- *metaschedulerabi.MetaSchedulerClaimNextCancellingJobEvent, chan<- *metaschedulerabi.MetaSchedulerClaimJobEvent) error); ok {
		r1 = rf(ctx, claimNextTopUpJobEvents, claimNextCancellingJobEvents, claimJobEvents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMetaScheduler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetaScheduler creates a new instance of MetaScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetaScheduler(t mockConstructorTestingTNewMetaScheduler) *MetaScheduler {
	mock := &MetaScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
