// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: sbatchapi/v1alpha1/sbatch.proto

package sbatchapiv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChallengeRequest) Reset() {
	*x = ChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeRequest) ProtoMessage() {}

func (x *ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeRequest.ProtoReflect.Descriptor instead.
func (*ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_sbatchapi_v1alpha1_sbatch_proto_rawDescGZIP(), []int{0}
}

type ChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge string `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *ChallengeResponse) Reset() {
	*x = ChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse) ProtoMessage() {}

func (x *ChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse.ProtoReflect.Descriptor instead.
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return file_sbatchapi_v1alpha1_sbatch_proto_rawDescGZIP(), []int{1}
}

func (x *ChallengeResponse) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

type GetSBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchLocationHash string `protobuf:"bytes,1,opt,name=batch_location_hash,json=batchLocationHash,proto3" json:"batch_location_hash,omitempty"`
	SignedChallenge   []byte `protobuf:"bytes,2,opt,name=signed_challenge,json=signedChallenge,proto3" json:"signed_challenge,omitempty"`
	Challenge         []byte `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	ProviderAddress   []byte `protobuf:"bytes,4,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	CustomerAddress   []byte `protobuf:"bytes,5,opt,name=customer_address,json=customerAddress,proto3" json:"customer_address,omitempty"`
	// job_id is hex encoded
	JobId string `protobuf:"bytes,6,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetSBatchRequest) Reset() {
	*x = GetSBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSBatchRequest) ProtoMessage() {}

func (x *GetSBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSBatchRequest.ProtoReflect.Descriptor instead.
func (*GetSBatchRequest) Descriptor() ([]byte, []int) {
	return file_sbatchapi_v1alpha1_sbatch_proto_rawDescGZIP(), []int{2}
}

func (x *GetSBatchRequest) GetBatchLocationHash() string {
	if x != nil {
		return x.BatchLocationHash
	}
	return ""
}

func (x *GetSBatchRequest) GetSignedChallenge() []byte {
	if x != nil {
		return x.SignedChallenge
	}
	return nil
}

func (x *GetSBatchRequest) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *GetSBatchRequest) GetProviderAddress() []byte {
	if x != nil {
		return x.ProviderAddress
	}
	return nil
}

func (x *GetSBatchRequest) GetCustomerAddress() []byte {
	if x != nil {
		return x.CustomerAddress
	}
	return nil
}

func (x *GetSBatchRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetSBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sbatch        string `protobuf:"bytes,1,opt,name=sbatch,proto3" json:"sbatch,omitempty"`
	GridLoggerUrl string `protobuf:"bytes,2,opt,name=grid_logger_url,json=gridLoggerUrl,proto3" json:"grid_logger_url,omitempty"`
}

func (x *GetSBatchResponse) Reset() {
	*x = GetSBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSBatchResponse) ProtoMessage() {}

func (x *GetSBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSBatchResponse.ProtoReflect.Descriptor instead.
func (*GetSBatchResponse) Descriptor() ([]byte, []int) {
	return file_sbatchapi_v1alpha1_sbatch_proto_rawDescGZIP(), []int{3}
}

func (x *GetSBatchResponse) GetSbatch() string {
	if x != nil {
		return x.Sbatch
	}
	return ""
}

func (x *GetSBatchResponse) GetGridLoggerUrl() string {
	if x != nil {
		return x.GridLoggerUrl
	}
	return ""
}

var File_sbatchapi_v1alpha1_sbatch_proto protoreflect.FileDescriptor

var file_sbatchapi_v1alpha1_sbatch_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0xf8, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x72, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x32, 0x65, 0x0a, 0x07,
	0x41, 0x75, 0x74, 0x68, 0x41, 0x50, 0x49, 0x12, 0x5a, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0x67, 0x0a, 0x09, 0x53, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x50, 0x49,
	0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e,
	0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xea, 0x01, 0x0a,
	0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x53, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x72, 0x69, 0x64, 0x2f, 0x73, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x73, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x73, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xf8,
	0x01, 0x00, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x12, 0x53, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x12,
	0x53, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xe2, 0x02, 0x1e, 0x53, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x53, 0x62, 0x61, 0x74, 0x63, 0x68, 0x61, 0x70, 0x69, 0x3a,
	0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sbatchapi_v1alpha1_sbatch_proto_rawDescOnce sync.Once
	file_sbatchapi_v1alpha1_sbatch_proto_rawDescData = file_sbatchapi_v1alpha1_sbatch_proto_rawDesc
)

func file_sbatchapi_v1alpha1_sbatch_proto_rawDescGZIP() []byte {
	file_sbatchapi_v1alpha1_sbatch_proto_rawDescOnce.Do(func() {
		file_sbatchapi_v1alpha1_sbatch_proto_rawDescData = protoimpl.X.CompressGZIP(file_sbatchapi_v1alpha1_sbatch_proto_rawDescData)
	})
	return file_sbatchapi_v1alpha1_sbatch_proto_rawDescData
}

var file_sbatchapi_v1alpha1_sbatch_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sbatchapi_v1alpha1_sbatch_proto_goTypes = []interface{}{
	(*ChallengeRequest)(nil),  // 0: sbatchapi.v1alpha1.ChallengeRequest
	(*ChallengeResponse)(nil), // 1: sbatchapi.v1alpha1.ChallengeResponse
	(*GetSBatchRequest)(nil),  // 2: sbatchapi.v1alpha1.GetSBatchRequest
	(*GetSBatchResponse)(nil), // 3: sbatchapi.v1alpha1.GetSBatchResponse
}
var file_sbatchapi_v1alpha1_sbatch_proto_depIdxs = []int32{
	0, // 0: sbatchapi.v1alpha1.AuthAPI.Challenge:input_type -> sbatchapi.v1alpha1.ChallengeRequest
	2, // 1: sbatchapi.v1alpha1.SBatchAPI.GetSBatch:input_type -> sbatchapi.v1alpha1.GetSBatchRequest
	1, // 2: sbatchapi.v1alpha1.AuthAPI.Challenge:output_type -> sbatchapi.v1alpha1.ChallengeResponse
	3, // 3: sbatchapi.v1alpha1.SBatchAPI.GetSBatch:output_type -> sbatchapi.v1alpha1.GetSBatchResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sbatchapi_v1alpha1_sbatch_proto_init() }
func file_sbatchapi_v1alpha1_sbatch_proto_init() {
	if File_sbatchapi_v1alpha1_sbatch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sbatchapi_v1alpha1_sbatch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sbatchapi_v1alpha1_sbatch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_sbatchapi_v1alpha1_sbatch_proto_goTypes,
		DependencyIndexes: file_sbatchapi_v1alpha1_sbatch_proto_depIdxs,
		MessageInfos:      file_sbatchapi_v1alpha1_sbatch_proto_msgTypes,
	}.Build()
	File_sbatchapi_v1alpha1_sbatch_proto = out.File
	file_sbatchapi_v1alpha1_sbatch_proto_rawDesc = nil
	file_sbatchapi_v1alpha1_sbatch_proto_goTypes = nil
	file_sbatchapi_v1alpha1_sbatch_proto_depIdxs = nil
}
