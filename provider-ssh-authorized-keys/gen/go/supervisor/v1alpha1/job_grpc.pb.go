// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: supervisor/v1alpha1/job.proto

package supervisorv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobAPIClient is the client API for JobAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobAPIClient interface {
	SendJobStart(ctx context.Context, in *SendJobStartRequest, opts ...grpc.CallOption) (*SendJobStartResponse, error)
	SendJobResult(ctx context.Context, in *SendJobResultRequest, opts ...grpc.CallOption) (*SendJobResultResponse, error)
	SendJobFail(ctx context.Context, in *SendJobFailRequest, opts ...grpc.CallOption) (*SendJobFailResponse, error)
}

type jobAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewJobAPIClient(cc grpc.ClientConnInterface) JobAPIClient {
	return &jobAPIClient{cc}
}

func (c *jobAPIClient) SendJobStart(ctx context.Context, in *SendJobStartRequest, opts ...grpc.CallOption) (*SendJobStartResponse, error) {
	out := new(SendJobStartResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1alpha1.JobAPI/SendJobStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) SendJobResult(ctx context.Context, in *SendJobResultRequest, opts ...grpc.CallOption) (*SendJobResultResponse, error) {
	out := new(SendJobResultResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1alpha1.JobAPI/SendJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) SendJobFail(ctx context.Context, in *SendJobFailRequest, opts ...grpc.CallOption) (*SendJobFailResponse, error) {
	out := new(SendJobFailResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1alpha1.JobAPI/SendJobFail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobAPIServer is the server API for JobAPI service.
// All implementations must embed UnimplementedJobAPIServer
// for forward compatibility
type JobAPIServer interface {
	SendJobStart(context.Context, *SendJobStartRequest) (*SendJobStartResponse, error)
	SendJobResult(context.Context, *SendJobResultRequest) (*SendJobResultResponse, error)
	SendJobFail(context.Context, *SendJobFailRequest) (*SendJobFailResponse, error)
	mustEmbedUnimplementedJobAPIServer()
}

// UnimplementedJobAPIServer must be embedded to have forward compatible implementations.
type UnimplementedJobAPIServer struct {
}

func (UnimplementedJobAPIServer) SendJobStart(context.Context, *SendJobStartRequest) (*SendJobStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJobStart not implemented")
}
func (UnimplementedJobAPIServer) SendJobResult(context.Context, *SendJobResultRequest) (*SendJobResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJobResult not implemented")
}
func (UnimplementedJobAPIServer) SendJobFail(context.Context, *SendJobFailRequest) (*SendJobFailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJobFail not implemented")
}
func (UnimplementedJobAPIServer) mustEmbedUnimplementedJobAPIServer() {}

// UnsafeJobAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobAPIServer will
// result in compilation errors.
type UnsafeJobAPIServer interface {
	mustEmbedUnimplementedJobAPIServer()
}

func RegisterJobAPIServer(s grpc.ServiceRegistrar, srv JobAPIServer) {
	s.RegisterService(&JobAPI_ServiceDesc, srv)
}

func _JobAPI_SendJobStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendJobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobAPIServer).SendJobStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1alpha1.JobAPI/SendJobStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobAPIServer).SendJobStart(ctx, req.(*SendJobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobAPI_SendJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobAPIServer).SendJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1alpha1.JobAPI/SendJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobAPIServer).SendJobResult(ctx, req.(*SendJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobAPI_SendJobFail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendJobFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobAPIServer).SendJobFail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1alpha1.JobAPI/SendJobFail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobAPIServer).SendJobFail(ctx, req.(*SendJobFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobAPI_ServiceDesc is the grpc.ServiceDesc for JobAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.v1alpha1.JobAPI",
	HandlerType: (*JobAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendJobStart",
			Handler:    _JobAPI_SendJobStart_Handler,
		},
		{
			MethodName: "SendJobResult",
			Handler:    _JobAPI_SendJobResult_Handler,
		},
		{
			MethodName: "SendJobFail",
			Handler:    _JobAPI_SendJobFail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supervisor/v1alpha1/job.proto",
}
