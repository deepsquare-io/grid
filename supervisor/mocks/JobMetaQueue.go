// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	eth "github.com/deepsquare-io/the-grid/supervisor/pkg/eth"

	event "github.com/ethereum/go-ethereum/event"

	metascheduler "github.com/deepsquare-io/the-grid/supervisor/gen/go/contracts/metascheduler"

	mock "github.com/stretchr/testify/mock"
)

// JobMetaQueue is an autogenerated mock type for the JobMetaQueue type
type JobMetaQueue struct {
	mock.Mock
}

// Claim provides a mock function with given fields: ctx
func (_m *JobMetaQueue) Claim(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimCancelling provides a mock function with given fields: ctx
func (_m *JobMetaQueue) ClaimCancelling(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJobStatus provides a mock function with given fields: ctx, jobID
func (_m *JobMetaQueue) GetJobStatus(ctx context.Context, jobID [32]byte) (eth.JobStatus, error) {
	ret := _m.Called(ctx, jobID)

	var r0 eth.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) eth.JobStatus); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Get(0).(eth.JobStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, [32]byte) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderAddress provides a mock function with given fields:
func (_m *JobMetaQueue) GetProviderAddress() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// RefuseJob provides a mock function with given fields: ctx, jobID
func (_m *JobMetaQueue) RefuseJob(ctx context.Context, jobID [32]byte) error {
	ret := _m.Called(ctx, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetJobStatus provides a mock function with given fields: ctx, jobID, status, jobDurationMinute
func (_m *JobMetaQueue) SetJobStatus(ctx context.Context, jobID [32]byte, status eth.JobStatus, jobDurationMinute uint64) error {
	ret := _m.Called(ctx, jobID, status, jobDurationMinute)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte, eth.JobStatus, uint64) error); ok {
		r0 = rf(ctx, jobID, status, jobDurationMinute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchClaimNextCancellingJobEvent provides a mock function with given fields: ctx, sink
func (_m *JobMetaQueue) WatchClaimNextCancellingJobEvent(ctx context.Context, sink chan<- *metascheduler.MetaSchedulerClaimNextCancellingJobEvent) (event.Subscription, error) {
	ret := _m.Called(ctx, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *metascheduler.MetaSchedulerClaimNextCancellingJobEvent) event.Subscription); ok {
		r0 = rf(ctx, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, chan<- *metascheduler.MetaSchedulerClaimNextCancellingJobEvent) error); ok {
		r1 = rf(ctx, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchClaimNextJobEvent provides a mock function with given fields: ctx, sink
func (_m *JobMetaQueue) WatchClaimNextJobEvent(ctx context.Context, sink chan<- *metascheduler.MetaSchedulerClaimJobEvent) (event.Subscription, error) {
	ret := _m.Called(ctx, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *metascheduler.MetaSchedulerClaimJobEvent) event.Subscription); ok {
		r0 = rf(ctx, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, chan<- *metascheduler.MetaSchedulerClaimJobEvent) error); ok {
		r1 = rf(ctx, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJobMetaQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobMetaQueue creates a new instance of JobMetaQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobMetaQueue(t mockConstructorTestingTNewJobMetaQueue) *JobMetaQueue {
	mock := &JobMetaQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
