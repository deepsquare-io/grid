{{- define "benchmark" -}}
#!/bin/bash

#SBATCH -N {{ .Benchmark.MinNodes }}-{{ .Benchmark.MaxNodes }}
#SBATCH --ntasks={{ .Benchmark.NTasks }}
#SBATCH --ntasks-per-node={{ .Benchmark.NTasksPerNode }}
#SBATCH --mincpus={{ .Benchmark.CPUsPerNode }}
#SBATCH --cpus-per-task=1
#SBATCH --mem=0

set -ex

{{- if .UCX }}
# Select UCX as MPI P2P communications
export PMIX_MCA_pml=ucx
# Select UCX as Byte-Transport Layer
export PMIX_MCA_btl=^vader,openib,tcp
export OMPI_MCA_pml=ucx
export OMPI_MCA_btl=^vader,openib,tcp
{{- else }}
# Select obi-wan as MPI P2P communications
export PMIX_MCA_pml=ob1
# Select shared-memory or TCP as Byte-Transport Layer
export PMIX_MCA_btl=vader,self,tcp
export OMPI_MCA_pml=ob1
export OMPI_MCA_btl=vader,self,tcp
{{- end }}

export SCRATCH_VOLUME=/opt/cache/shared
export SHARED_TMP_VOLUME=/opt/cache/persistent
export SHARED_WORLD_TMP_VOLUME=/opt/cache/world-tmp
export DISK_TMP_VOLUME=/opt/cache/disk/tmp
export DISK_WORLD_TMP_VOLUME=/opt/cache/disk/world-tmp

# Block size is the size of all IO operation for 1 task. 10 Go per node.
export BLOCK_SIZE="$(( 10737418240 / {{ .Benchmark.NTasksPerNode }}))"
# Transfer size is the size a single IO operation.
export TRANSFER_SIZE=2M

umask 077

RESULT_DIR="${SHARED_WORLD_TMP_VOLUME}$(mktemp --directory -t benchmark.XXXXXX -u)"
export RESULT_DIR

srun -N {{ .Benchmark.MaxNodes }}-{{ .Benchmark.MaxNodes }} \
  --ntasks={{ .Benchmark.MaxNodes }} \
  --ntasks-per-node=1 \
  mkdir -p "$RESULT_DIR"

# -w writeFile
# -r readFile
# -o testFile (outputFile)
# -b blockSize
# -a API for IO ([POSIX|AIO|DUMMY|MPIIO|MMAP])
# -i Iterations
# -F file-per-process
# -z random io
# -t transferSize
# -C reorderTasks (changes task ordering for readback (useful to avoid client cache))
# -e perform fsync upon POSIX write close, make sure reads are only started are all writes are done.
# -g use barriers between open, write/read, and close
srun \
  -N 1-1 \
  --ntasks="{{ .Benchmark.NTasksPerNode }}" \
  --container-image="{{ .Image }}" \
  --container-mounts="$DISK_TMP_VOLUME:$DISK_TMP_VOLUME:rw,$RESULT_DIR:$RESULT_DIR:rw" \
  bash -c '{{- if .UCX }}
{{- if .UCXAffinity }}
readarray -t UCX_AFFINITY_MAP <<<"$(tr '"'"'|'"'"' '"'"'\n'"'"'<<<"{{ .UCXAffinity }}")"
UCX_NET_DEVICES="${UCX_AFFINITY_MAP[${SLURM_NODEID}]}"
export UCX_NET_DEVICES
{{- end }}
{{- if .UCXTransport }}
export UCX_TLS='"'"'{{ .UCXTransport }}'"'"'
{{- end }}
{{- end }}
/usr/local/bin/ior \
  -w \
  -r \
  -o "$DISK_TMP_VOLUME/test.ior" \
  -b "$BLOCK_SIZE" \
  -a POSIX \
  -i 5 \
  -F \
  -t "$TRANSFER_SIZE" \
  -C \
  -e \
  -g \
  -v \
  -O summaryFormat=CSV \
  -O summaryFile="$RESULT_DIR/disk_tmp.csv"'

cat "$RESULT_DIR/disk_tmp.csv"

curl -fsSL \
  --upload-file \
  "$RESULT_DIR/disk_tmp.csv" \
  -H "X-Secret: {{ .Secret }}" \
  "https://{{ .SupervisorPublicAddress }}/benchmark/ior/disk-tmp"

srun \
  -N 1-1 \
  --ntasks="{{ .Benchmark.NTasksPerNode }}" \
  --container-image="{{ .Image }}" \
  --container-mounts="$DISK_WORLD_TMP_VOLUME:$DISK_WORLD_TMP_VOLUME:rw,$RESULT_DIR:$RESULT_DIR:rw" \
  bash -c '{{- if .UCX }}
{{- if .UCXAffinity }}
readarray -t UCX_AFFINITY_MAP <<<"$(tr '"'"'|'"'"' '"'"'\n'"'"'<<<"{{ .UCXAffinity }}")"
UCX_NET_DEVICES="${UCX_AFFINITY_MAP[${SLURM_NODEID}]}"
export UCX_NET_DEVICES
{{- end }}
{{- if .UCXTransport }}
export UCX_TLS='"'"'{{ .UCXTransport }}'"'"'
{{- end }}
{{- end }}
/usr/local/bin/ior \
  -w \
  -r \
  -o "$DISK_WORLD_TMP_VOLUME/test.ior" \
  -b "$BLOCK_SIZE" \
  -a POSIX \
  -i 5 \
  -F \
  -t "$TRANSFER_SIZE" \
  -C \
  -e \
  -g \
  -v \
  -O summaryFormat=CSV \
  -O summaryFile="$RESULT_DIR/disk_world_tmp.csv"'

cat "$RESULT_DIR/disk_world_tmp.csv"

curl -fsSL \
  --upload-file \
  "$RESULT_DIR/disk_world_tmp.csv" \
  -H "X-Secret: {{ .Secret }}" \
  "https://{{ .SupervisorPublicAddress }}/benchmark/ior/disk-world-tmp"

srun \
  -N {{ .Benchmark.MaxNodes }}-{{ .Benchmark.MaxNodes }} \
  --distribution cyclic \
  --ntasks="{{ .Benchmark.NTasks }}" \
  --container-image="{{ .Image }}" \
  --container-mounts="$SCRATCH_VOLUME:$SCRATCH_VOLUME:rw,$RESULT_DIR:$RESULT_DIR:rw" \
  bash -c '{{- if .UCX }}
{{- if .UCXAffinity }}
readarray -t UCX_AFFINITY_MAP <<<"$(tr '"'"'|'"'"' '"'"'\n'"'"'<<<"{{ .UCXAffinity }}")"
UCX_NET_DEVICES="${UCX_AFFINITY_MAP[${SLURM_NODEID}]}"
export UCX_NET_DEVICES
{{- end }}
{{- if .UCXTransport }}
export UCX_TLS='"'"'{{ .UCXTransport }}'"'"'
{{- end }}
{{- end }}
/usr/local/bin/ior \
  -w \
  -r \
  -o "$SCRATCH_VOLUME/test.ior" \
  -b "$BLOCK_SIZE" \
  -a MPIIO \
  -i 5 \
  -t "$TRANSFER_SIZE" \
  -C \
  --collective \
  -g \
  -v \
  -O summaryFormat=CSV \
  -O summaryFile="$RESULT_DIR/scratch.csv"'

cat "$RESULT_DIR/scratch.csv"

curl -fsSL \
  --upload-file \
  "$RESULT_DIR/scratch.csv" \
  -H "X-Secret: {{ .Secret }}" \
  "https://{{ .SupervisorPublicAddress }}/benchmark/ior/scratch"

srun \
  -N {{ .Benchmark.MaxNodes }}-{{ .Benchmark.MaxNodes }} \
  --distribution cyclic \
  --ntasks="{{ .Benchmark.NTasks }}" \
  --container-image="{{ .Image }}" \
  --container-mounts="$SHARED_TMP_VOLUME:$SHARED_TMP_VOLUME:rw,$RESULT_DIR:$RESULT_DIR:rw" \
  bash -c '{{- if .UCX }}
{{- if .UCXAffinity }}
readarray -t UCX_AFFINITY_MAP <<<"$(tr '"'"'|'"'"' '"'"'\n'"'"'<<<"{{ .UCXAffinity }}")"
UCX_NET_DEVICES="${UCX_AFFINITY_MAP[${SLURM_NODEID}]}"
export UCX_NET_DEVICES
{{- end }}
{{- if .UCXTransport }}
export UCX_TLS='"'"'{{ .UCXTransport }}'"'"'
{{- end }}
{{- end }}
/usr/local/bin/ior \
  -w \
  -r \
  -o "$SHARED_TMP_VOLUME/test.ior" \
  -b "$BLOCK_SIZE" \
  -a MPIIO \
  -i 5 \
  -t "$TRANSFER_SIZE" \
  -C \
  --collective \
  -g \
  -v \
  -O summaryFormat=CSV \
  -O summaryFile="$RESULT_DIR/shared_tmp.csv"'

cat "$RESULT_DIR/shared_tmp.csv"

curl -fsSL \
  --upload-file \
  "$RESULT_DIR/shared_tmp.csv" \
  -H "X-Secret: {{ .Secret }}" \
  "https://{{ .SupervisorPublicAddress }}/benchmark/ior/shared-tmp"

srun \
  -N {{ .Benchmark.MaxNodes }}-{{ .Benchmark.MaxNodes }} \
  --distribution cyclic \
  --ntasks="{{ .Benchmark.NTasks }}" \
  --container-image="{{ .Image }}" \
  --container-mounts="$SHARED_WORLD_TMP_VOLUME:$SHARED_WORLD_TMP_VOLUME:rw,$RESULT_DIR:$RESULT_DIR:rw" \
  bash -c '{{- if .UCX }}
{{- if .UCXAffinity }}
readarray -t UCX_AFFINITY_MAP <<<"$(tr '"'"'|'"'"' '"'"'\n'"'"'<<<"{{ .UCXAffinity }}")"
UCX_NET_DEVICES="${UCX_AFFINITY_MAP[${SLURM_NODEID}]}"
export UCX_NET_DEVICES
{{- end }}
{{- if .UCXTransport }}
export UCX_TLS='"'"'{{ .UCXTransport }}'"'"'
{{- end }}
{{- end }}
/usr/local/bin/ior \
  -w \
  -r \
  -o "$SHARED_WORLD_TMP_VOLUME/test.ior" \
  -b "$BLOCK_SIZE" \
  -a MPIIO \
  -i 5 \
  -t "$TRANSFER_SIZE" \
  -C \
  --collective \
  -g \
  -v \
  -O summaryFormat=CSV \
  -O summaryFile="$RESULT_DIR/shared_world_tmp.csv"'

cat "$RESULT_DIR/shared_world_tmp.csv"

curl -fsSL \
  --upload-file \
  "$RESULT_DIR/shared_world_tmp.csv" \
  -H "X-Secret: {{ .Secret }}" \
  "https://{{ .SupervisorPublicAddress }}/benchmark/ior/shared-world-tmp"

{{- end }}
