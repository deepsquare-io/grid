#!/usr/bin/env bash

: "${BINARY_NAME:="dps"}"
: "${INSTALL_DIR:="$HOME/.local/bin"}"
: "${VERIFY_CHECKSUM:="true"}"

HAS_CURL="$(type "curl" &>/dev/null && echo true || echo false)"
HAS_WGET="$(type "wget" &>/dev/null && echo true || echo false)"
HAS_SHA256SUM="$(type "sha256sum" &>/dev/null && echo true || echo false)"

# initArch discovers the architecture for this system.
initArch() {
  ARCH=$(uname -m)
  case $ARCH in
  armv5*) ARCH="armv5" ;;
  armv6*) ARCH="armv6" ;;
  armv7*) ARCH="arm" ;;
  aarch64) ARCH="arm64" ;;
  x86_64) ARCH="amd64" ;;
  esac
}

# initOS discovers the operating system for this system.
initOS() {
  OS=$(uname | tr '[:upper:]' '[:lower:]')

  case "$OS" in
  # Minimalist GNU for Windows
  mingw* | cygwin*) OS='windows' ;;
  esac
}

# verifySupported checks that the os/arch combination is supported for
# binary builds, as well whether or not necessary tools are present.
verifySupported() {
  local supported="darwin-amd64\ndarwin-arm64\nlinux-amd64\nlinux-arm64\nlinux-riscv64\nwindows-amd64"
  if ! echo "${supported}" | grep -q "${OS}-${ARCH}"; then
    echo "No prebuilt binary for ${OS}-${ARCH}."
    echo "To build from source, go to https://github.com/deepsquare-io/grid/tree/main/cli"
    exit 1
  fi

  if [ "${VERIFY_CHECKSUM}" == "true" ] && [ "${HAS_SHA256SUM}" != "true" ]; then
    echo "In order to verify checksum, sha256sum must first be installed."
    echo "Please install sha256sum or set VERIFY_CHECKSUM=false in your environment."
    exit 1
  fi

  if [ "${HAS_CURL}" != "true" ] && [ "${HAS_WGET}" != "true" ]; then
    echo "Either curl or wget is required"
    exit 1
  fi
}

# checkDesiredVersion checks if the desired version is available.
checkDesiredVersion() {
  if [ "$DESIRED_VERSION" == "" ]; then
    # Get tag from release URL
    local latest_release_url="https://raw.githubusercontent.com/deepsquare-io/grid/main/latest"
    local latest_release_response=""
    if [ "${HAS_CURL}" == "true" ]; then
      latest_release_response=$(curl -L --silent --show-error --fail "$latest_release_url" | grep cli | sed -E 's/cli=(.*)/\1/' 2>&1 || true)
    elif [ "${HAS_WGET}" == "true" ]; then
      latest_release_response=$(wget "$latest_release_url" -q -O - 2>&1 | grep cli | sed -E 's/cli=(.*)/\1/' || true)
    fi
    TAG=$(echo "$latest_release_response" | grep '^v[0-9]')
    if [ "$TAG" == "" ]; then
      printf "Could not retrieve the latest release tag information from %s: %s\n" "${latest_release_url}" "${latest_release_response}"
      exit 1
    fi
  else
    TAG=$DESIRED_VERSION
  fi
}

# checkInstalledVersion checks which version of dps is installed and
# if it needs to be changed.
checkInstalledVersion() {
  if [[ -f "${INSTALL_DIR}/${BINARY_NAME}" ]]; then
    local version
    version=$("${INSTALL_DIR}/${BINARY_NAME}" --version | sed -n 's/^dps version \([^ ]*\).*/\1/p')
    if [[ "$version" == "$TAG" ]]; then
      echo "dps ${version} is already ${DESIRED_VERSION:-latest}"
      return 0
    else
      echo "dps ${TAG} is available. Changing from version ${version}."
      return 1
    fi
  else
    return 1
  fi
}

# downloadFile downloads the latest binary package and also the checksum
# for that binary.
downloadFile() {
  DPS_DIST="dps-$OS-$ARCH"
  DOWNLOAD_URL="https://github.com/deepsquare-io/grid/releases/download/cli%2F$TAG/$DPS_DIST"
  CHECKSUM_URL="https://github.com/deepsquare-io/grid/releases/download/cli%2F$TAG/checksums.txt"
  DPS_TMP_ROOT="$(mktemp -dt dps-installer-XXXXXX)"
  DPS_TMP_FILE="$DPS_TMP_ROOT/$DPS_DIST"
  DPS_SUM_FILE="$DPS_TMP_ROOT/$DPS_DIST.sha256"
  echo "Downloading $DOWNLOAD_URL"
  if [ "${HAS_CURL}" == "true" ]; then
    curl -SsL "$CHECKSUM_URL" -o "$DPS_SUM_FILE"
    curl -SsL "$DOWNLOAD_URL" -o "$DPS_TMP_FILE"
  elif [ "${HAS_WGET}" == "true" ]; then
    wget -q -O "$DPS_SUM_FILE" "$CHECKSUM_URL"
    wget -q -O "$DPS_TMP_FILE" "$DOWNLOAD_URL"
  fi
}

# verifyFile verifies the SHA256 checksum of the binary package
# and the GPG signatures for both the package and checksum file
# (depending on settings in environment).
verifyFile() {
  if [ "${VERIFY_CHECKSUM}" == "true" ]; then
    verifyChecksum
  fi
}

# installFile installs the Helm binary.
installFile() {
  echo "Preparing to install $BINARY_NAME into ${INSTALL_DIR}"
  cp "$DPS_TMP_FILE" "$INSTALL_DIR/$BINARY_NAME"
  chmod +x "$INSTALL_DIR/$BINARY_NAME"
  echo "$BINARY_NAME installed into $INSTALL_DIR/$BINARY_NAME"
}

# verifyChecksum verifies the SHA256 checksum of the binary package.
verifyChecksum() {
  printf "Verifying checksum... "

  cd "$DPS_TMP_ROOT"
  if ! sha256sum -c "${DPS_SUM_FILE}" --ignore-missing; then
    echo "SHA sum of ${DPS_TMP_FILE} does not match. Aborting."
    exit 1
  fi
  cd -
  echo "Done."
}

# fail_trap is executed if an error occurs.
fail_trap() {
  result=$?
  if [ "$result" != "0" ]; then
    if [[ -n "$INPUT_ARGUMENTS" ]]; then
      echo "Failed to install $BINARY_NAME with the arguments provided: $INPUT_ARGUMENTS"
      help
    else
      echo "Failed to install $BINARY_NAME"
    fi
    echo -e "\tFor support, go to https://github.com/deepsquare-io/grid."
  fi
  cleanup
  exit $result
}

# testVersion tests the installed client to make sure it is working.
testVersion() {
  set +e
  DPS="$(command -v "$BINARY_NAME")"
  if [ "$?" = "1" ]; then
    echo "$BINARY_NAME not found. Is $INSTALL_DIR on your "'$PATH?'
    exit 1
  fi
  set -e
}

# help provides possible cli installation arguments
help() {
  echo "Accepted cli arguments are:"
  echo -e "\t[--help|-h ] ->> prints this help"
  echo -e "\t[--version|-v <desired_version>] . When not defined it fetches the latest release from GitHub"
  echo -e "\te.g. --version v3.0.0 or -v canary"
}

# cleanup temporary files to avoid https://github.com/helm/helm/issues/2977
cleanup() {
  if [[ -d "${HELM_TMP_ROOT:-}" ]]; then
    rm -rf "$HELM_TMP_ROOT"
  fi
}

# Execution

#Stop execution on any error
trap "fail_trap" EXIT
set -e

# Set debug if desired
if [ "${DEBUG}" == "true" ]; then
  set -x
fi

# Parsing input arguments (if any)
export INPUT_ARGUMENTS="${@}"
set -u
while [[ $# -gt 0 ]]; do
  case $1 in
  '--version' | -v)
    shift
    if [[ $# -ne 0 ]]; then
      export DESIRED_VERSION="${1}"
      if [[ "$1" != "v"* ]]; then
        echo "Expected version arg ('${DESIRED_VERSION}') to begin with 'v', fixing..."
        export DESIRED_VERSION="v${1}"
      fi
    else
      echo -e "Please provide the desired version. e.g. --version v3.0.0 or -v canary"
      exit 0
    fi
    ;;
  '--help' | -h)
    help
    exit 0
    ;;
  *)
    exit 1
    ;;
  esac
  shift
done
set +u

initArch
initOS
verifySupported
checkDesiredVersion
if ! checkInstalledVersion; then
  downloadFile
  verifyFile
  installFile
fi
testVersion
cleanup
