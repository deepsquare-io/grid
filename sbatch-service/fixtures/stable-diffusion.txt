#!/bin/bash -l

set -e

export NTASKS='1'
export CPUS_PER_TASK='8'
export MEM_PER_CPU='8000'
export GPUS_PER_TASK='1'
export GPUS='1'
export CPUS='8'
export MEM='64000'
/usr/local/bin/grid-logger-writer \
  --server.tls \
  --server.tls.ca=/etc/ssl/certs/ca-certificates.crt \
  --server.tls.server-host-override='logger.example.com' \
  --server.endpoint='logger.example.com:443' \
  --pipe.path="/tmp/$SLURM_JOB_NAME.$SLURM_JOB_ID-pipe" \
  --log-name="$SLURM_JOB_NAME" \
  --user="$USER" \
  >/dev/stdout 2>/dev/stderr &
LOGGER_PID="$!"
/usr/bin/sleep 1
exec 3>&1
exec 4>&2
exec 1>>"/tmp/$SLURM_JOB_NAME.$SLURM_JOB_ID-pipe"
exec 2>&1

disposeLogs() {
  echo ---
  /usr/bin/sleep 15
  exec 1>&3
  exec 2>&4
  echo killing logger
  kill $LOGGER_PID || true
  wait $LOGGER_PID || true
  echo cleaned
}
trap disposeLogs EXIT INT TERM
# SCOPE: LOGS
(
STORAGE_PATH="/opt/cache/shared/$(id -u)/$SLURM_JOB_NAME.$SLURM_JOB_ID"
export STORAGE_PATH
export DEEPSQUARE_INPUT="$STORAGE_PATH/input"
export DEEPSQUARE_OUTPUT="$STORAGE_PATH/output"
export DEEPSQUARE_ENV="$STORAGE_PATH/env"
ENROOT_RUNTIME_PATH="/run/enroot/user-$(id -u)"
export ENROOT_RUNTIME_PATH
ENROOT_CACHE_PATH="/opt/cache/enroot/group-$(id -g)"
export ENROOT_CACHE_PATH
ENROOT_DATA_PATH="/mnt/scratch/tmp/enroot/containers/user-$(id -u)"
export ENROOT_DATA_PATH
/usr/bin/mkdir -p "$STORAGE_PATH" "$DEEPSQUARE_OUTPUT" "$DEEPSQUARE_INPUT"
/usr/bin/touch "$DEEPSQUARE_ENV"
/usr/bin/chmod -R 700 "$STORAGE_PATH"
/usr/bin/chown -R "$(id -u):$(id -g)" "$STORAGE_PATH"

cleanup() {
  /bin/rm -rf "$STORAGE_PATH"
}
trap cleanup EXIT INT TERM

cd "$STORAGE_PATH/"
loadDeepsquareEnv() {
  while IFS= read -r envvar; do
    printf ',%s' "$envvar"
  done < <(/usr/bin/grep -v '^#' "$DEEPSQUARE_ENV" | /usr/bin/grep '=')
}
/usr/bin/echo "Continous output sync is not avaible with HTTP. Will use simple output."
export 'STEPS'='150'
export 'HEIGHT'='768'
export 'WIDTH'='768'
export 'MODEL'=''
export 'ITER'='4'
export 'SAMPLES'='3'
export 'PROMPT'=''
/usr/bin/echo 'Running: ''generate-image'
export APPTAINER_BIND="$STORAGE_PATH:/deepsquare:rw",'/data/beegfs/cache/persistent':'/cache':'rw','/opt/models/stable-diffusion':'/models':'ro'
# shellcheck disable=SC2097,SC2098
STORAGE_PATH='/deepsquare' DEEPSQUARE_INPUT='/deepsquare/input' DEEPSQUARE_OUTPUT='/deepsquare/output' DEEPSQUARE_ENV='/deepsquare/env' HF_HOME='/cache' /usr/bin/srun --job-name='generate-image' \
  --export=ALL"$(loadDeepsquareEnv)" \
  --cpus-per-task=8 \
  --mem-per-cpu=8000M \
  --gpus-per-task=1 \
  --ntasks=1 \
  --gpu-bind=none \
  /usr/bin/apptainer --silent exec \
  --disable-cache \
  --nv \
  '/opt/software/registry-1.deepsquare.run/library/stable-diffusion:latest' \
  /bin/bash -c 'set -e

params=(
  "--ckpt" "/models/$MODEL/model.ckpt"
  "--outdir" "$DEEPSQUARE_OUTPUT"
  "--H" "$HEIGHT"
  "--W" "$WIDTH"
  "--steps" "$STEPS"
  "--n_iter" "$ITER"
  "--device" "cuda"
  "--n_samples" "$SAMPLES"
  "--seed" "$(od -N 4 -t uL -An /dev/urandom | tr -d " ")"
  "--prompt" "$PROMPT"
)
if [ -f "/models/$MODEL/config.yaml" ]; then
  params+=("--config" "/models/$MODEL/config.yaml")
fi

python /stablediffusion/scripts/txt2img.py "\${params[@]}"

echo "##############################################################"
echo
echo "Click on this link to preview your results:"
find "$DEEPSQUARE_OUTPUT" -name "grid*.png" -exec sh -c '"'"'file="{}"; curl -sS --upload-file "$file" https://transfer.deepsquare.run/; rm "$file"'"'"' \\;
echo
echo
echo "##############################################################"

chmod -R 777 /cache/* 2>/dev/null || true'
/usr/bin/echo "Output contains:"
/usr/bin/find "$DEEPSQUARE_OUTPUT/" -exec realpath --relative-to "$DEEPSQUARE_OUTPUT/" {} \;
cd $DEEPSQUARE_OUTPUT/..
function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
/usr/bin/echo "##############################################################"
/usr/bin/echo
/usr/bin/echo "Click on this link to download your results:"
if [ "$(find output/ -type f | wc -l)" -eq 1 ]; then
/usr/bin/echo "$(urldecode "$(/usr/bin/curl -sS --upload-file "$(find output/ -type f)" 'https://transfer.deepsquare.run/' )")"
else
/usr/bin/zip -q -r "output.zip" "output/"
/usr/bin/echo "$(urldecode "$(/usr/bin/curl -sS --upload-file "output.zip" 'https://transfer.deepsquare.run/' )")"
fi
/usr/bin/echo
/usr/bin/echo
/usr/bin/echo "##############################################################"
cd $STORAGE_PATH
)
# END SCOPE: LOGS
