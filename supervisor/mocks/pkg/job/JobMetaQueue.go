// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	metascheduler "github.com/deepsquare-io/the-grid/supervisor/gen/go/contracts/metascheduler"

	mock "github.com/stretchr/testify/mock"
)

// JobMetaQueue is an autogenerated mock type for the JobMetaQueue type
type JobMetaQueue struct {
	mock.Mock
}

// Claim provides a mock function with given fields: ctx
func (_m *JobMetaQueue) Claim(ctx context.Context) (*metascheduler.MetaSchedulerClaimNextJobEvent, error) {
	ret := _m.Called(ctx)

	var r0 *metascheduler.MetaSchedulerClaimNextJobEvent
	if rf, ok := ret.Get(0).(func(context.Context) *metascheduler.MetaSchedulerClaimNextJobEvent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metascheduler.MetaSchedulerClaimNextJobEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJobMetaQueue interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobMetaQueue creates a new instance of JobMetaQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobMetaQueue(t mockConstructorTestingTNewJobMetaQueue) *JobMetaQueue {
	mock := &JobMetaQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
