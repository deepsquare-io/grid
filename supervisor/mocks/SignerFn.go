// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// SignerFn is an autogenerated mock type for the SignerFn type
type SignerFn struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *SignerFn) Execute(_a0 common.Address, _a1 *types.Transaction) (*types.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(common.Address, *types.Transaction) *types.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *types.Transaction) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSignerFn interface {
	mock.TestingT
	Cleanup(func())
}

// NewSignerFn creates a new instance of SignerFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSignerFn(t mockConstructorTestingTNewSignerFn) *SignerFn {
	mock := &SignerFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
