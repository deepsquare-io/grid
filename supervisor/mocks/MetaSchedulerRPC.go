// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	metascheduler "github.com/deepsquare-io/the-grid/supervisor/gen/go/contracts/metascheduler"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MetaSchedulerRPC is an autogenerated mock type for the MetaSchedulerRPC type
type MetaSchedulerRPC struct {
	mock.Mock
}

// ClaimNextJob provides a mock function with given fields: opts
func (_m *MetaSchedulerRPC) ClaimNextJob(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobStatus provides a mock function with given fields: opts, _jobID
func (_m *MetaSchedulerRPC) GetJobStatus(opts *bind.CallOpts, _jobID [32]byte) (uint8, error) {
	ret := _m.Called(opts, _jobID)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [32]byte) uint8); ok {
		r0 = rf(opts, _jobID)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, [32]byte) error); ok {
		r1 = rf(opts, _jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseClaimNextJobEvent provides a mock function with given fields: log
func (_m *MetaSchedulerRPC) ParseClaimNextJobEvent(log types.Log) (*metascheduler.MetaSchedulerClaimNextJobEvent, error) {
	ret := _m.Called(log)

	var r0 *metascheduler.MetaSchedulerClaimNextJobEvent
	if rf, ok := ret.Get(0).(func(types.Log) *metascheduler.MetaSchedulerClaimNextJobEvent); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metascheduler.MetaSchedulerClaimNextJobEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderSetJobStatus provides a mock function with given fields: opts, _jobID, _jobStatus, jobDurationMinute
func (_m *MetaSchedulerRPC) ProviderSetJobStatus(opts *bind.TransactOpts, _jobID [32]byte, _jobStatus uint8, jobDurationMinute uint64) (*types.Transaction, error) {
	ret := _m.Called(opts, _jobID, _jobStatus, jobDurationMinute)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte, uint8, uint64) *types.Transaction); ok {
		r0 = rf(opts, _jobID, _jobStatus, jobDurationMinute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte, uint8, uint64) error); ok {
		r1 = rf(opts, _jobID, _jobStatus, jobDurationMinute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefuseJob provides a mock function with given fields: opts, _jobID
func (_m *MetaSchedulerRPC) RefuseJob(opts *bind.TransactOpts, _jobID [32]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, _jobID)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte) *types.Transaction); ok {
		r0 = rf(opts, _jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte) error); ok {
		r1 = rf(opts, _jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMetaSchedulerRPC interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetaSchedulerRPC creates a new instance of MetaSchedulerRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetaSchedulerRPC(t mockConstructorTestingTNewMetaSchedulerRPC) *MetaSchedulerRPC {
	mock := &MetaSchedulerRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
