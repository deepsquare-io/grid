// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	event "github.com/ethereum/go-ethereum/event"

	metascheduler "github.com/deepsquare-io/the-grid/supervisor/gen/go/contracts/metascheduler"

	mock "github.com/stretchr/testify/mock"
)

// MetaSchedulerWS is an autogenerated mock type for the MetaSchedulerWS type
type MetaSchedulerWS struct {
	mock.Mock
}

// WatchClaimJobEvent provides a mock function with given fields: opts, sink
func (_m *MetaSchedulerWS) WatchClaimJobEvent(opts *bind.WatchOpts, sink chan<- *metascheduler.MetaSchedulerClaimJobEvent) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimJobEvent) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimJobEvent) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimJobEvent) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchClaimNextCancellingJobEvent provides a mock function with given fields: opts, sink
func (_m *MetaSchedulerWS) WatchClaimNextCancellingJobEvent(opts *bind.WatchOpts, sink chan<- *metascheduler.MetaSchedulerClaimNextCancellingJobEvent) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextCancellingJobEvent) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextCancellingJobEvent) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextCancellingJobEvent) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchClaimNextTopUpJobEvent provides a mock function with given fields: opts, sink
func (_m *MetaSchedulerWS) WatchClaimNextTopUpJobEvent(opts *bind.WatchOpts, sink chan<- *metascheduler.MetaSchedulerClaimNextTopUpJobEvent) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextTopUpJobEvent) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextTopUpJobEvent) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *metascheduler.MetaSchedulerClaimNextTopUpJobEvent) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMetaSchedulerWS interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetaSchedulerWS creates a new instance of MetaSchedulerWS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetaSchedulerWS(t mockConstructorTestingTNewMetaSchedulerWS) *MetaSchedulerWS {
	mock := &MetaSchedulerWS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
