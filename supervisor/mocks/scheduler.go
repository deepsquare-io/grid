// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	scheduler "github.com/deepsquare-io/the-grid/supervisor/pkg/job/scheduler"
	mock "github.com/stretchr/testify/mock"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

type Scheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *Scheduler) EXPECT() *Scheduler_Expecter {
	return &Scheduler_Expecter{mock: &_m.Mock}
}

// CancelJob provides a mock function with given fields: ctx, req
func (_m *Scheduler) CancelJob(ctx context.Context, req *scheduler.CancelRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.CancelRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scheduler_CancelJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelJob'
type Scheduler_CancelJob_Call struct {
	*mock.Call
}

// CancelJob is a helper method to define mock.On call
//   - ctx context.Context
//   - req *scheduler.CancelRequest
func (_e *Scheduler_Expecter) CancelJob(ctx interface{}, req interface{}) *Scheduler_CancelJob_Call {
	return &Scheduler_CancelJob_Call{Call: _e.mock.On("CancelJob", ctx, req)}
}

func (_c *Scheduler_CancelJob_Call) Run(run func(ctx context.Context, req *scheduler.CancelRequest)) *Scheduler_CancelJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*scheduler.CancelRequest))
	})
	return _c
}

func (_c *Scheduler_CancelJob_Call) Return(_a0 error) *Scheduler_CancelJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scheduler_CancelJob_Call) RunAndReturn(run func(context.Context, *scheduler.CancelRequest) error) *Scheduler_CancelJob_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *Scheduler) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scheduler_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type Scheduler_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Scheduler_Expecter) HealthCheck(ctx interface{}) *Scheduler_HealthCheck_Call {
	return &Scheduler_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *Scheduler_HealthCheck_Call) Run(run func(ctx context.Context)) *Scheduler_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Scheduler_HealthCheck_Call) Return(_a0 error) *Scheduler_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scheduler_HealthCheck_Call) RunAndReturn(run func(context.Context) error) *Scheduler_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Submit provides a mock function with given fields: ctx, req
func (_m *Scheduler) Submit(ctx context.Context, req *scheduler.SubmitRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.SubmitRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.SubmitRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *scheduler.SubmitRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scheduler_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type Scheduler_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - ctx context.Context
//   - req *scheduler.SubmitRequest
func (_e *Scheduler_Expecter) Submit(ctx interface{}, req interface{}) *Scheduler_Submit_Call {
	return &Scheduler_Submit_Call{Call: _e.mock.On("Submit", ctx, req)}
}

func (_c *Scheduler_Submit_Call) Run(run func(ctx context.Context, req *scheduler.SubmitRequest)) *Scheduler_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*scheduler.SubmitRequest))
	})
	return _c
}

func (_c *Scheduler_Submit_Call) Return(_a0 string, _a1 error) *Scheduler_Submit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scheduler_Submit_Call) RunAndReturn(run func(context.Context, *scheduler.SubmitRequest) (string, error)) *Scheduler_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// TopUp provides a mock function with given fields: ctx, req
func (_m *Scheduler) TopUp(ctx context.Context, req *scheduler.TopUpRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *scheduler.TopUpRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scheduler_TopUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopUp'
type Scheduler_TopUp_Call struct {
	*mock.Call
}

// TopUp is a helper method to define mock.On call
//   - ctx context.Context
//   - req *scheduler.TopUpRequest
func (_e *Scheduler_Expecter) TopUp(ctx interface{}, req interface{}) *Scheduler_TopUp_Call {
	return &Scheduler_TopUp_Call{Call: _e.mock.On("TopUp", ctx, req)}
}

func (_c *Scheduler_TopUp_Call) Run(run func(ctx context.Context, req *scheduler.TopUpRequest)) *Scheduler_TopUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*scheduler.TopUpRequest))
	})
	return _c
}

func (_c *Scheduler_TopUp_Call) Return(_a0 error) *Scheduler_TopUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scheduler_TopUp_Call) RunAndReturn(run func(context.Context, *scheduler.TopUpRequest) error) *Scheduler_TopUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewScheduler creates a new instance of Scheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scheduler {
	mock := &Scheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
