// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	metascheduler "github.com/deepsquare-io/the-grid/supervisor/pkg/metascheduler"

	mock "github.com/stretchr/testify/mock"
)

// JobHandler is an autogenerated mock type for the JobHandler type
type JobHandler struct {
	mock.Mock
}

type JobHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *JobHandler) EXPECT() *JobHandler_Expecter {
	return &JobHandler_Expecter{mock: &_m.Mock}
}

// SetJobStatus provides a mock function with given fields: ctx, jobID, jobStatus, jobDuration
func (_m *JobHandler) SetJobStatus(ctx context.Context, jobID [32]byte, jobStatus metascheduler.JobStatus, jobDuration uint64) error {
	ret := _m.Called(ctx, jobID, jobStatus, jobDuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte, metascheduler.JobStatus, uint64) error); ok {
		r0 = rf(ctx, jobID, jobStatus, jobDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobHandler_SetJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJobStatus'
type JobHandler_SetJobStatus_Call struct {
	*mock.Call
}

// SetJobStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID [32]byte
//   - jobStatus metascheduler.JobStatus
//   - jobDuration uint64
func (_e *JobHandler_Expecter) SetJobStatus(ctx interface{}, jobID interface{}, jobStatus interface{}, jobDuration interface{}) *JobHandler_SetJobStatus_Call {
	return &JobHandler_SetJobStatus_Call{Call: _e.mock.On("SetJobStatus", ctx, jobID, jobStatus, jobDuration)}
}

func (_c *JobHandler_SetJobStatus_Call) Run(run func(ctx context.Context, jobID [32]byte, jobStatus metascheduler.JobStatus, jobDuration uint64)) *JobHandler_SetJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([32]byte), args[2].(metascheduler.JobStatus), args[3].(uint64))
	})
	return _c
}

func (_c *JobHandler_SetJobStatus_Call) Return(_a0 error) *JobHandler_SetJobStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobHandler_SetJobStatus_Call) RunAndReturn(run func(context.Context, [32]byte, metascheduler.JobStatus, uint64) error) *JobHandler_SetJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewJobHandler creates a new instance of JobHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobHandler {
	mock := &JobHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
